use std::fmt::Display;

use anyhow::{bail, Context, Result};
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct Lock {
    package: Vec<Package>,
}

#[derive(Deserialize, Debug, PartialEq, Eq)]
struct Package {
    name: String,
    version: String,
}

impl Package {
    #![allow(dead_code)]
    pub fn new(name: &str, version: &str) -> Self {
        Self {
            name: name.to_string(),
            version: version.to_string(),
        }
    }
}

impl Display for Package {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}@{}", self.name, self.version)
    }
}

fn parse_lock(contents: &str) -> Result<Lock> {
    toml::from_str(&contents).context("Could not parse lock")
}

pub fn run() -> Result<()> {
    let args: Vec<_> = std::env::args().collect();
    if args.len() != 2 {
        bail!("Expected exactly one arg");
    }

    let lock_path = &args[1];
    let lock_contents = std::fs::read_to_string(&lock_path).context("Could not read lock file")?;
    let lock: Lock = parse_lock(&lock_contents)?;
    for package in lock.package {
        println!("{package}");
    }

    Ok(())
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_cargo_lock() {
        let contents = r#"
# This file is automatically @generated by Cargo.
version = 3

[[package]]
name = "anyhow"
version = "1.0.58"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "lockdiff"
version = "1.0.0"
dependencies = [
 "anyhow",
]"#;
        let lock = parse_lock(contents).unwrap();
        assert_eq!(
            &lock.package,
            &[
                Package::new("anyhow", "1.0.58"),
                Package::new("lockdiff", "1.0.0")
            ]
        );
    }

    #[test]
    fn test_poetry_lock() {
        let contents = r#"
[[package]]
name = "arrow"
version = "1.2.2"
python-versions = ">=3.6"

[package.dependencies]
python-dateutil = ">=2.7.0"
"#;
        let lock = parse_lock(contents).unwrap();
        assert_eq!(&lock.package, &[Package::new("arrow", "1.2.2")]);
    }
}
